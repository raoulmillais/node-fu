#! /bin/bash

# Fail when using uninitialised variables
set -u

# Fail the script if any statement returns non true
set -e

function usage
{
	echo -e "fu - a commandline tool for setting up nodejs projects\n\n" \
			"	setup - Verify dependencies and install necessary packages to setup fu for first use\n" \
			"	init project-path/ - Initialise a new project in project-path\n";
}

function setup
{
	# Verify dependencies
	which git || { echo "You need to have git installed to use fu"; exit 1; }
	which node || { echo "You need to have node installed to use fu"; exit 1; }
	which npm || { echo "You need to have npm installed to use fu"; exit 1; }

	# TODO: Install global npm packages
	# readyjs
	# jezebel
	exit 0;
}

function init
{
	# TODO: Verify fu setup has been run on this machine

	# First argument is the path to the repo
	REPO_PATH="$1"
	SCRIPT_PATH="$(cd "$( dirname "$0" )" && pwd )"

	# Trim trailing slashes
	REPO_PATH=`echo "${REPO_PATH}" | sed -e "s/\/*$//" `
	echo "Initialising project in $REPO_PATH"

	if ! cd "$REPO_PATH" ;
	then 
		mkdir "$REPO_PATH" && cd "$REPO_PATH"
		exit 1;
	fi

	# CWD is now the project folder
	echo "Initialising git repository"
	git init || { echo "Failed to initialise a repository in ${REPO_PATH}"; exit 2; }

	echo "Creating project folder structure"
	mkdir {lib,support,spec} || { echo "Failed to create project folder structure"; exit 3; }

	echo "Copying pre-commit hook"
	cp "$SCRIPT_PATH"/hooks/pre-commit .git/hooks || { echo "Failed to copy pre-commit hook"; exit 4; }

	echo "Copying readyjs config"
	cp "$SCRIPT_PATH"/readyjs.conf . || { echo "Failed to copy pre-commit hook"; exit 4; }

	# TODO: Install project npm packages

	# TODO: Copy version bump script
	# TODO: Copy Makefile

	exit 0;
}

# Command parsing
case "$1" in
	"setup")
		setup
		;;
	"init")
		init $2
		;;
	*)
		usage
		exit 99
		;;
esac
