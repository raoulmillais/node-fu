#! /bin/bash

# Fail when using uninitialised variables
set -u

# Fail the script if any statement returns non true
set -e

# Debug all expansions
# set -x

function usage
{
	echo -e "fu - a commandline tool for setting up nodejs projects\n\n" \
			"	env     - Setup your machine for development fu (first use)\n" \
			"	project - path/ - Initialise a new project in project-path\n";
}

function env 
{
	[ "$(id -u)" = "0" ] || {
		echo "Please setup your environment as root"
		exit 1;
	}

	# Verify dependencies
	which git > /dev/null || { 
		echo "You need to have git installed to use fu - I can't help you with that :("; 
		exit 1
	}
	which node > /dev/null|| { 
		echo "You need to have node installed to use fu - I can't help you with that :("; 
		exit 1;
	}
	which ruby > /dev/null|| { 
		# TODO: Check for ruby version 1.8.6+ or 1.9.1+
		echo "You need to have ruby 1.8.6+ or 1.9.1+ installed to use fu - I can't help you with that :(";
		exit 1;
	}
	which hub > /dev/null|| { 
		echo "You need to have the hub github cli app installed to use fu - https://github.com/defunkt/hub";
		exit 1;
	}

	if ! git config --global github.user || \
		! git config --global github.token || \
		! git config --global user.name || \
		! git config --global user.email ;
	then
		echo -e "You haven't configured your git for github correctly\n" \
				"fu needs you to configure github username and token\n" \
				"http://help.github.com/set-your-user-name-email-and-github-token/";
		exit 1;
	fi

	# Install npm and packages as needed
	which npm > /dev/null || {
		echo "Installing npm";
		curl http://npmjs.org/install.sh | sh;
	}

	if ! npm ls -g --parseable | grep ready.js > /dev/null ;
	then
		echo "Installing ready.js";
		npm install -f -g ready.js
	fi

	if ! npm ls -g --parseable | grep jezebel > /dev/null ;
	then
		echo "Installing jezebel";
		npm install -f -g jezebel
	fi

	exit 0;
}

function project
{
	[ "$(id -u)" != "0" ] || {
		echo "Please do not create projects as root"
		exit 1;
	}

	# TODO: Verify fu setup has been run on this machine

	# First argument is the path to the repo
	REPO_PATH="$1"
	SCRIPT_PATH="$(cd "$( dirname "$0" )" && pwd )"
	GITHUB_USER="$(git config --global github.user)"
	GIT_USER="$(git config --global user.name)"
	GIT_EMAIL="$(git config --global user.email)"


	# Trim trailing slashes
	REPO_PATH=$(echo "${REPO_PATH}" | sed -e "s/\/*$//")
	echo "Initialising project in ${REPO_PATH}"

	if ! cd "$REPO_PATH" ;
	then 
		mkdir "${REPO_PATH}" || { echo "Failed to create project folder ${REPO_PATH}"; exit 1; }
	fi

	# CWD is now the project folder
	echo "Initialising git repository"
	git init || { echo "Failed to initialise a repository in ${REPO_PATH}"; exit 2; }

	echo "Creating project folder structure"
	mkdir {bin,lib,support,spec} || { echo "Failed to create project folder structure"; exit 3; }

	echo "Copying pre-commit hook"
	cp "${SCRIPT_PATH}"/hooks/pre-commit .git/hooks || { echo "Failed to copy pre-commit hook"; exit 4; }

	echo "Copying readyjs config"
	cp "${SCRIPT_PATH}"/readyjs.conf . || { echo "Failed to copy readyjs.conf"; exit 4; }

	echo "Copying package.json"
	cp "${SCRIPT_PATH}"/package.json . || { echo "Failed to copy package.json"; exit 5; }

	echo "Copying bump-version.sh"
	cp "${SCRIPT_PATH}"/bump-version.sh . || { echo "Failed to copy bump-version.sh"; exit 6; }

	echo "Copying Makefile"
	cp "${SCRIPT_PATH}"/Makefile . || { echo "Failed to copy Makefile"; exit 7; }

	${SCRIPT_PATH}/configure-package.js "${REPO_PATH}" "${GITHUB_USER}" "${GIT_USER}" "${GIT_EMAIL}" "package.json" || \
	{ echo "Failed to configure package"; exit 5; }

	# TODO: npm install it

	echo "Done creating your project";
	exit 0;
}

# Command parsing
case "$1" in
	"env")
		shift;
		env "$@"
		;;
	"project")
		# Remove the first arg
		shift;
		# Pass the remaining args
		project "$@"
		;;
	*)
		usage
		exit 99
		;;
esac
