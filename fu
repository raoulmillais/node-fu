#! /bin/bash

# Fail when using uninitialised variables
set -u

# Fail the script if any statement returns non true
set -e

# Debug all expansions
# set -x

function usage
{
	echo -e "fu - a commandline tool for setting up nodejs projects\n\n" \
			"	setup   - Setup your machine for development fu (first use)\n" \
			"	project - path/ - Initialise a new project in project-path\n";
}

function setup 
{
	[ "$(id -u)" = "0" ] || {
		echo "Please setup your environment as root"
		exit 1;
	}

	# Verify dependencies
	which git > /dev/null || {
		echo "You need to have git installed to use fu - I can't help you with that :("; 
		exit 1
	}
	which node > /dev/null|| {
		echo "You need to have node installed to use fu - I can't help you with that :("; 
		exit 1;
	}
	which ruby > /dev/null|| {
		# TODO: Check for ruby version 1.8.6+ or 1.9.1+
		echo "You need to have ruby 1.8.6+ or 1.9.1+ installed to use fu - I can't help you with that :(";
		exit 1;
	}
	which hub > /dev/null|| {
		echo "You need to have the hub github cli app installed to use fu - https://github.com/defunkt/hub";
		exit 1;
	}

	if ! git config --global github.user > /dev/null || \
		! git config --global github.token > /dev/null || \
		! git config --global user.name > /dev/null || \
		! git config --global user.email > /dev/null ;
	then
		echo -e "You haven't configured git for github correctly\n" \
				"fu needs you to configure github username and token\n" \
				"http://help.github.com/set-your-user-name-email-and-github-token/";
		exit 1;
	fi

	# Install npm and packages as needed
	which npm > /dev/null || {
		echo "Installing npm";
		curl http://npmjs.org/install.sh | sh;
	}

	if ! npm ls -g --parseable | grep ready.js > /dev/null ;
	then
		echo "Installing ready.js";
		npm install -f -g ready.js
	fi

	if ! npm ls -g --parseable | grep jessie > /dev/null ;
	then
		echo "Installing jessie";
		npm install -f -g jessie
	fi

	if ! npm ls -g --parseable | grep jezebel > /dev/null ;
	then
		echo "Installing jezebel";
		npm install -f -g jezebel
	fi

	if ! npm ls -g --parseable | grep dox > /dev/null ;
	then
		echo "Installing dox";
		npm install -f -g dox
	fi
	echo "Done. fu is now ready for use"
	exit 0;
}

function project
{
	[ "$(id -u)" != "0" ] || {
		echo "Please do not create projects as root"
		exit 1;
	}

	# TODO: Verify fu setup has been run on this machine

	# First argument is the path to the repo
	if [ "$1" = "." ]
	then
		# Set the project name to the current folder name
		REPO_PATH="${PWD##*/}"
		PROJECT_NAME="${REPO_PATH}"
		IS_PWD="yes"
	else
		REPO_PATH="$1"
		PROJECT_NAME="${REPO_PATH##*/}"
		IS_PWD="no"
	fi
	SCRIPT_PATH="$(cd "$( dirname "$0" )" && pwd )"
	ASSETS_PATH="${SCRIPT_PATH}"/assets
	GITHUB_USER="$(git config --global github.user)"
	GIT_USER="$(git config --global user.name)"
	GIT_EMAIL="$(git config --global user.email)"


	# Trim trailing slashes
	REPO_PATH=$(echo "${REPO_PATH}" | sed -e "s/\/*$//")
	echo "Initialising project in ${REPO_PATH}"

	if [ "${IS_PWD}" != "yes" ]
	then
		if ! cd "$REPO_PATH" > /dev/null ;
		then 
			mkdir "${REPO_PATH}" || { echo "Failed to create project folder ${REPO_PATH}"; exit 1; }
			cd "${REPO_PATH}"
		fi
	fi

	# CWD is now the project folder
	if [ -d .git ]
	then
		echo "${REPO_PATH} is already a git repository"
	else
		echo "Initialising git repository"
		git init || { echo "Failed to initialise a repository in ${REPO_PATH}"; exit 2; }
	fi

	if [ -r .gitignore ]
	then
		echo "Found a gitignore: omitting"
	else
		echo "Copying gitignore"
		cp "${ASSETS_PATH}"/.gitignore .gitignore || { echo "Failed to copy gitignore"; exit 4; }
	fi

	echo "Creating project folder structure"
	mkdir -p {bin,lib,support,spec} || { echo "Failed to create project folder structure"; exit 3; }

	if [ -x .git/hooks/pre-commit ]
	then
		echo "Found a pre-commit hook: omitting"
	else
		echo "Copying pre-commit hook"
		cp "${ASSETS_PATH}"/hooks/pre-commit .git/hooks || { echo "Failed to copy pre-commit hook"; exit 4; }
	fi

	if [ -r readyjs.conf ]
	then
		echo "Found a ready.js config file: omitting"
	else
		echo "Copying readyjs config"
		cp "${ASSETS_PATH}"/readyjs.conf . || { echo "Failed to copy readyjs.conf"; exit 4; }
	fi

	if [ -r package.json ]
	then
		echo "Found a package.json: omitting and not configuring"
	else
		echo "Copying package.json"
		cp "${ASSETS_PATH}"/package.json . || { echo "Failed to copy package.json"; exit 5; }
		${SCRIPT_PATH}/lib/configure-package.js "${PROJECT_NAME}" "${GITHUB_USER}" "${GIT_USER}" "${GIT_EMAIL}" "package.json" || \
		{ echo "Failed to configure package"; exit 5; }
		
	fi

	if [ -r Makefile ]
	then
		echo "Found a Makefile: omitting"
	else
		echo "Copying Makefile"
		cp "${ASSETS_PATH}"/Makefile . || { echo "Failed to copy Makefile"; exit 7; }
	fi

	if [ -r .travis.yml ]
	then
		echo "Found a travis config: omitting"
	else
		echo "Copying travis config"
		cp "${ASSETS_PATH}"/.travis.yml . || {
			echo "Failed to copy travis config";
			exit 7;
		}
	fi
	# npm install .

}

function webproject
{
	project "$@"

	echo "Creating web project folder structure"
	mkdir -p {client,public,views} || {
		echo "Failed to create web project folder structure";
		exit 3;
	}

	if [ -r server.js ]
	then
		echo "Found a server.js file: omitting"
	else
		echo "Copying server.js"
		cp "${ASSETS_PATH}"/server.js . || {
			echo "Failed to copy server.js";
			exit 4;
		}
	fi

	${SCRIPT_PATH}/lib/configure-package.js "${PROJECT_NAME}" \
											"${GITHUB_USER}" \
											"${GIT_USER}" \
											"${GIT_EMAIL}" \
											"package.json" \
											"web" || {
		echo "Failed to configure package";
		exit 5;
	}

	if [ -r views/index.jade ]
	then
		echo "Found a index.jade file: omitting"
	else
		echo "Copying index.jade"
		cp "${ASSETS_PATH}"/views/index.jade views/ || {
			echo "Failed to copy index.jade";
			exit 4;
		}
	fi

	if [ -r views/layout.jade ]
	then
		echo "Found a layout.jade file: omitting"
	else
		echo "Copying layout.jade"
		cp "${ASSETS_PATH}"/views/layout.jade views/ || {
			echo "Failed to copy layout.jade";
			exit 4;
		}
	fi

	if [ -r client/index.js ]
	then
		echo "Found a client/index.js file: omitting"
	else
		echo "Copying layout.jade"
		cp "${ASSETS_PATH}"/client/index.js client/ || {
			echo "Failed to copy client/index.js";
			exit 4;
		}
	fi
}

# Command parsing
case "$1" in
	"setup")
		shift;
		setup "$@"
		;;
	"project")
		# Remove the first arg
		shift;
		# Pass the remaining args
		project "$@"
		echo "Done creating your project";
		exit 0;
		;;
	"webproject")
		shift;
		webproject "$@"
		echo "Done creating your web project";
		exit 0;
		;;
	*)
		usage
		exit 99
		;;
esac
